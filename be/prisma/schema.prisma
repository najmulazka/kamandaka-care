// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       Int    @id @default(autoincrement())
  username String @unique
  password String
}

model Clients {
  id          Int           @id @default(autoincrement())
  fullName    String
  email       String        @unique
  googleId    String
  bookings    Bookings[]
  BookingTest BookingTest[]
}

model Doctors {
  id         Int         @id @default(autoincrement())
  fullName   String
  email      String      @unique
  password   String
  specialist String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  services   Services[]
  TestType   TestTypes[]
}

model Services {
  id          Int           @id @default(autoincrement())
  doctorId    Int
  serviceName String       
  price       String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  doctors     Doctors       @relation(fields: [doctorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  serviceTime ServiceTime[]
  bookings    Bookings[]
}

model ServiceTime {
  id              Int      @id @default(autoincrement())
  servicesId      Int
  senin           Boolean  @default(true)
  startTimeSenin  DateTime @default(now()) @db.Time()
  endTimeSenin    DateTime @default(now()) @db.Time()
  selasa          Boolean  @default(true)
  startTimeSelasa DateTime @default(now()) @db.Time()
  endTimeSelasa   DateTime @default(now()) @db.Time()
  rabu            Boolean  @default(true)
  startTimeRabu   DateTime @default(now()) @db.Time()
  endTimeRabu     DateTime @default(now()) @db.Time()
  kamis           Boolean  @default(true)
  startTimeKamis  DateTime @default(now()) @db.Time()
  endTimeKamis    DateTime @default(now()) @db.Time()
  jumat           Boolean  @default(true)
  startTimeJumat  DateTime @default(now()) @db.Time()
  endTimeJumat    DateTime @default(now()) @db.Time()
  sabtu           Boolean  @default(true)
  startTimeSabtu  DateTime @default(now()) @db.Time()
  endTimeSabtu    DateTime @default(now()) @db.Time()
  minggu          Boolean  @default(true)
  startTimeMinggu DateTime @default(now()) @db.Time()
  endTimeMinggu   DateTime @default(now()) @db.Time()
  services        Services @relation(fields: [servicesId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Bookings {
  id         Int      @id @default(autoincrement())
  clientId   Int
  serviceId  Int
  dateTime   DateTime
  linkClient String?
  linkHost   String?
  createdAt  DateTime @default(now())
  isValidate Boolean?
  clients    Clients  @relation(fields: [clientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  services   Services @relation(fields: [serviceId], references: [id],  onDelete: Cascade, onUpdate: Cascade)
}

model Educations {
  id             Int         @id @default(autoincrement())
  educationLevel String      @unique
  TestType       TestTypes[]
}

model TestTypes {
  id          Int           @id @default(autoincrement())
  educationId Int
  doctorId    Int
  testName    String        @unique
  price       String
  educations  Educations    @relation(fields: [educationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  doctors     Doctors       @relation(fields: [doctorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  BookingTest BookingTest[]
}

model BookingTest {
  id          Int       @id @default(autoincrement())
  clientId    Int
  testTypeId  Int
  fileId      String?   @unique
  resultUrl   String?
  questionUrl String?   @unique
  isValidate  Boolean?
  clients     Clients   @relation(fields: [clientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  testypes    TestTypes @relation(fields: [testTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
